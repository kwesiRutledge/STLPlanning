"""
plot_plan.py
Description:
    This file is devoted to many different methods for plotting the plans generated by this toolbox using matplotlib
    and pypoman.
    This returns the figure handle. The figure will still need to be shown or saved by the calling function, if desired.
"""

import matplotlib.pyplot as plt
import pypoman as ppm
import numpy as np

def plot_plan(pwl_plans,plot_tuples,size_list=[],equal_aspect=True,limits=None):

    # Constants
    num_agents = len(pwl_plans)

    # Define Default Values for Some Arguments
    default_size = 0.11*4/2
    if len(size_list) == 0:
        size_list = [ default_size for agent_index in range(num_agents) ]

    # Algorithm

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.axis('off')

    vertices = []
    for temp_tuple in plot_tuples:
        for A, b in temp_tuple[0]:
            vs = ppm.duality.compute_polytope_vertices(A, b)
            vertices.append(vs)
            ppm.polygon.plot_polygon(vs, color = temp_tuple[1], alpha=1.)

    if limits is not None:
        plt.xlim(limits[0])
        plt.ylim(limits[1])
    else:
        vertices = np.concatenate(vertices, axis=0)
        xmin, ymin = vertices.min(axis=0)
        xmax, ymax = vertices.max(axis=0)
        plt.xlim([xmin - 0.1, xmax + 0.1])
        plt.ylim([ymin - 0.1, ymax + 0.1])

    if equal_aspect:
        plt.gca().set_aspect('equal', adjustable='box')

    if pwl_plans is None or pwl_plans[0] is None:
        plt.show()
        return

    if len(pwl_plans) <= 4:
        colors = ['k', np.array([153,0,71])/255, np.array([6,0,153])/255, np.array([0, 150, 0])/255]
    else:
        cmap = plt.get_cmap('tab10')
        colors = [cmap(i) for i in np.linspace(0, 0.85, len(pwl_plans))]

    for i in range(len(PWLs)):
        PWL = pwl_plans[i]
        ax.plot([P[0][0] for P in PWL], [P[0][1] for P in PWL], '-', color = colors[i])
        ax.plot(PWL[-1][0][0], PWL[-1][0][1], '*', color = colors[i])
        print(PWL[0][0][0])
        print(size_list[i])
        ax.add_patch(
            plt.Circle( (PWL[0][0][0], PWL[0][0][1]) , size_list[i], color=colors[i] )
        )
        # ax.plot(PWL[0][0][0], PWL[0][0][1], 'o', color = colors[i])

    return fig
